[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "Pcloudy-testing-agent"
version = "0.1.0"
description = "AI-powered test case generation from descriptions and images"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
authors = [
    {name = "Pcloudy Testing Agent Team"}
]
maintainers = [
    {name = "Pcloudy Testing Agent Team"}
]
keywords = ["testing", "ai", "automation", "qa", "test-cases"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Quality Assurance",
]
dependencies = [
    "flask>=2.3.0",
    "flask-cors>=4.0.0",
    "openai>=1.3.0",
    "pillow>=10.0.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    # Production dependencies
    "gunicorn>=21.2.0; extra == 'production'",
    "gevent>=23.9.0; extra == 'production'",
]

[project.optional-dependencies]
production = [
    "gunicorn>=21.2.0",
    "gevent>=23.9.0",
]
development = [
    "black>=23.0.0",           # Code formatting
    "flake8>=6.0.0",           # Linting
    "mypy>=1.0.0",             # Type checking
    "ruff>=0.1.0",             # Fast Python linter
    "isort>=5.12.0",           # Import sorting
]
testing = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/Pcloudy-testing-agent"
Repository = "https://github.com/yourusername/Pcloudy-testing-agent"
Issues = "https://github.com/yourusername/Pcloudy-testing-agent/issues"
Documentation = "https://github.com/yourusername/Pcloudy-testing-agent#readme"

[project.scripts]
test-agent = "start:main"
test-agent-start = "start:main"
test-agent-backend = "backend.app:main"
test-agent-frontend = "server_api:main"

[tool.hatch.build.targets.wheel]
py-modules = ["start", "server_api"]
packages = ["backend"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["backend", "server_api"]
skip = ["__init__.py"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "flask_cors.*",
    "openai.*",
    "PIL.*"
]
ignore_missing_imports = true

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=backend",
    "--cov=server_api",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80"
]

[tool.hatch.build.targets.wheel.shared-data]
"backend/README.md" = "share/doc/backend/README.md"
"backend/requirements.txt" = "share/doc/backend/requirements.txt"
